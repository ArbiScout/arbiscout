# ArbiScout PRO v2 ‚Äî by @tvoibro

import telebot
from telebot import types
import requests
import json
import os

# === –í–°–¢–ê–í –°–í–û–á –¢–û–ö–ï–ù–ò –¢–£–¢ ===
TELEGRAM_TOKEN = "8068344858:AAFgpujoX7h3x9ut9EAdsgvZgdrkQqCRK3Y"
import os
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


bot = telebot.TeleBot(TELEGRAM_TOKEN)

# === –°–¢–í–û–†–Æ–Ñ–ú–û –§–ê–ô–õ –î–õ–Ø –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
USERS_FILE = "users.json"
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w") as f:
        json.dump({}, f)

def load_users():
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

USERS = load_users()

# === ID –∞–¥–º—ñ–Ω–∞ ===
ADMIN_ID = 569820502  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# === –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = str(message.chat.id)
    if chat_id not in USERS:
        USERS[chat_id] = {
            "name": message.from_user.first_name,
            "pro": False,
            "cards": [],
            "balance": {"UAH": 0, "USDT": 0}
        }
        save_users(USERS)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìà –ó–≤'—è–∑–∫–∞", "ü§ñ –ü–∏—Ç–∞–Ω–Ω—è –ø–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É")
    markup.add("üí∞ –ë–∞–ª–∞–Ω—Å", "üí≥ –ö–∞—Ä—Ç–∫–∏")
    markup.add("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", "üíé –ö—É–ø–∏—Ç–∏ PRO")
    if message.from_user.id == ADMIN_ID:
        markup.add("üõ† –ê–¥–º—ñ–Ω–∫–∞")

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n–Ø ‚Äî ArbiScout. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=markup)
@bot.message_handler(func=lambda m: m.text == "üë§ –ü—Ä–æ—Ñ—ñ–ª—å")
def profile(message):
    chat_id = str(message.chat.id)
    user = USERS.get(chat_id, {})
    text = f"–Ü–º‚Äô—è: {user.get('name')}\nPRO: {'‚úÖ' if user.get('pro') else '‚ùå'}\n–ö–∞—Ä—Ç–æ–∫: {len(user.get('cards', []))}"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def balance(message):
    chat_id = str(message.chat.id)
    user = USERS.get(chat_id, {})
    bal = user.get("balance", {})
    bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å:\nUAH: {bal.get('UAH')} ‚Ç¥\nUSDT: {bal.get('USDT')} $")

@bot.message_handler(func=lambda m: m.text == "üí≥ –ö–∞—Ä—Ç–∫–∏")
def cards(message):
    chat_id = str(message.chat.id)
    user = USERS.get(chat_id, {})
    cards = user.get("cards", [])

    if not cards:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫.")
    else:
        card_list = "\n".join(f"‚Ä¢ {card}" for card in cards)
        bot.send_message(message.chat.id, f"–¢–≤–æ—ó –∫–∞—Ä—Ç–∫–∏:\n{card_list}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É", "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É")
def add_card(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:")
    bot.register_next_step_handler(message, save_card)

def save_card(message):
    card = message.text
    chat_id = str(message.chat.id)
    USERS[chat_id]["cards"].append(card)
    save_users(USERS)
    bot.send_message(message.chat.id, "–ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
def ask_gpt(message_text):
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": message_text}],
        "temperature": 0.7
    }

    response = requests.post(
        "https://api.openai.com/v1/chat/completions",
        headers=headers, json=data
    )

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ –±–æ–∫—É AI. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

@bot.message_handler(func=lambda m: m.text == "ü§ñ –ü–∏—Ç–∞–Ω–Ω—è –ø–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É")
def ask_ai(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è:")
    bot.register_next_step_handler(message, handle_ai)

def handle_ai(message):
    bot.send_message(message.chat.id, "–î—É–º–∞—é...")
    answer = ask_gpt(message.text)
    bot.send_message(message.chat.id, answer)
@bot.message_handler(func=lambda m: m.text == "üíé –ö—É–ø–∏—Ç–∏ PRO")
def buy_pro(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    pay_url = "https://www.liqpay.ua/api/checkout"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—é –æ–ø–ª–∞—Ç—É
    markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ 99 –≥—Ä–Ω", url=pay_url))
    bot.send_message(chat_id, "–û—Ç—Ä–∏–º–∞–π –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ ArbiScout!", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üõ† –ê–¥–º—ñ–Ω–∫–∞")
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    total_users = len(USERS)
    total_pro = sum(1 for u in USERS.values() if u.get("pro"))
    bot.send_message(message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\nPRO: {total_pro}")

@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back(message):
    return start(message)

import os
import flask
from flask import request

WEBHOOK_URL = 'https://arbiscout.onrender.com'  # –≤—Å—Ç–∞–≤ —Å–≤–æ—é —Å—Å–∏–ª–∫—É —Å—é–¥–∏

app = flask.Flask(__name__)

@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid Content-Type', 403

if __name__ == "__main__":
    PORT = int(os.environ.get('PORT', 5000))  # –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–æ—Ä—Ç –≤—ñ–¥ Render
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)

